"""
test_message_handler_start_new_user: –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ª–æ–≥–∏–∫—É –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –≤–≤–æ–¥–µ –∫–æ–º–∞–Ω–¥—ã "–Ω–∞—á–∞—Ç—å".
test_message_handler_start_registered_user: –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ª–æ–≥–∏–∫—É –¥–ª—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
test_message_handler_registration: –¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–µ–∞–∫—Ü–∏—é –Ω–∞ –∫–æ–º–∞–Ω–¥—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.
test_state_handler_waiting_for_sex: –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ—Å—Ç–æ—è–Ω–∏—è "–æ–∂–∏–¥–∞–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –ø–æ–ª–∞".
test_state_handler_waiting_for_age: –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ—Å—Ç–æ—è–Ω–∏—è "–æ–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞".
test_state_handler_waiting_for_city: –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ—Å—Ç–æ—è–Ω–∏—è "–æ–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –≥–æ—Ä–æ–¥–∞".
"""

import pytest
from unittest.mock import MagicMock
from handler import Handler
from unittest.mock import patch
from unittest.mock import patch, MagicMock

from btn_text import buttons_regist, buttons_start, \
    buttons_choice_sex, BTN_REGISTRATION, BTN_FIND_PAIR, BTN_SEX_MAN, welcome_message

# –ü—Ä–∏–º–µ—Ä —Ñ–∏–∫—Å—Ç—É—Ä—ã –¥–ª—è –º–æ–∫–∞ –æ–±—ä–µ–∫—Ç–∞ VKBot
@pytest.fixture
def mock_vk_bot():
    vk_bot = MagicMock()
    vk_bot.send_message = MagicMock()
    vk_bot.create_keyboard = MagicMock(return_value='keyboard_mock')
    vk_bot.set_user_state = MagicMock()
    return vk_bot

# –ü—Ä–∏–º–µ—Ä —Ñ–∏–∫—Å—Ç—É—Ä—ã –¥–ª—è –º–æ–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
@pytest.fixture
def mock_db_utils():
    db_utils = MagicMock()
    db_utils.check_user_existence_db = MagicMock(return_value=None)
    return db_utils

@pytest.fixture
def handler(mock_vk_bot, mock_db_utils):
    handler = Handler(mock_vk_bot)
    handler.util_db = mock_db_utils
    return handler

# –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–µ—Ç–æ–¥ message_handler —Å –∫–æ–º–∞–Ω–¥–æ–π "–Ω–∞—á–∞—Ç—å"
def test_message_handler_start_new_user(handler, mock_vk_bot):
    # –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    event = MagicMock()
    event.user_id = 123
    request = "–Ω–∞—á–∞—Ç—å"
    user_name = "–ò–≤–∞–Ω"

    # –í—ã–∑–æ–≤ –º–µ—Ç–æ–¥–∞
    handler.message_handler(event, user_name, request)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–µ—Ç–æ–¥—ã send_message –∏ create_keyboard –≤—ã–∑—ã–≤–∞—é—Ç—Å—è —Å –æ–∂–∏–¥–∞–µ–º—ã–º–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏
    mock_vk_bot.send_message.assert_called_with(
        123, f"–ü—Ä–∏–≤–µ—Ç, {user_name}! üëã {welcome_message}",
        keyboard='keyboard_mock'
    )
    mock_vk_bot.create_keyboard.assert_called_with(buttons_regist)

# –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–µ—Ç–æ–¥ message_handler –¥–ª—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def test_message_handler_start_registered_user(handler, mock_vk_bot, mock_db_utils):
    # –ù–∞—Å—Ç—Ä–æ–∏–º, —á—Ç–æ–±—ã –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≤–æ–∑–≤—Ä–∞—â–∞–ª–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    mock_db_utils.check_user_existence_db.return_value = True

    # –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    event = MagicMock()
    event.user_id = 123
    request = "–Ω–∞—á–∞—Ç—å"
    user_name = "–ò–≤–∞–Ω"

    # –í—ã–∑–æ–≤ –º–µ—Ç–æ–¥–∞
    handler.message_handler(event, user_name, request)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–ª—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    mock_vk_bot.send_message.assert_called_with(
        123, f"–ü—Ä–∏–≤–µ—Ç, {user_name}! üëã",
        keyboard='keyboard_mock'
    )
    mock_vk_bot.create_keyboard.assert_called_with(buttons_start)

# –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–µ—Ç–æ–¥ message_handler —Å –∑–∞–ø—Ä–æ—Å–æ–º –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
def test_message_handler_registration(handler, mock_vk_bot):
    # –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    event = MagicMock()
    event.user_id = 123
    request = BTN_REGISTRATION.lower()
    user_name = "–ò–≤–∞–Ω"

    handler.utils_auxiliary.prepare_user_candidate_data = MagicMock(return_value="—Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ")

    # –í—ã–∑–æ–≤ –º–µ—Ç–æ–¥–∞
    handler.message_handler(event, user_name, request)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–æ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    mock_vk_bot.send_message.assert_called_with(
        123, f"{user_name} —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ",
        keyboard='keyboard_mock'
    )
    mock_vk_bot.create_keyboard.assert_called_with(buttons_start)

# –¢–µ—Å—Ç–∏—Ä—É–µ–º state_handler —Å —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º "waiting_for_sex"
def test_state_handler_waiting_for_sex(handler, mock_vk_bot):
    # –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    event = MagicMock()
    user_id = 123
    user_name = "–ò–≤–∞–Ω"
    state = "waiting_for_sex"
    request = BTN_SEX_MAN.lower()

    # –í—ã–∑–æ–≤ –º–µ—Ç–æ–¥–∞
    handler.state_handler(state, event, user_id, user_name, request)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–æ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤–æ–∑—Ä–∞—Å—Ç –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    mock_vk_bot.send_message.assert_called_with(
        user_id, "–í–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç –∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω –≤–æ–∑—Ä–∞—Å—Ç–æ–≤, —Ä–∞–∑–¥–µ–ª—è—è –∑–Ω–∞—á–µ–Ω–∏—è –∑–∞–ø—è—Ç–æ–π."
    )
    mock_vk_bot.set_user_state.assert_called_with(user_id, "waiting_for_age")
    assert handler.user_data[user_id]['sex'] == 2  # –ü–æ–ª: –º—É–∂—Å–∫–æ–π

# –¢–µ—Å—Ç–∏—Ä—É–µ–º state_handler —Å —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º "waiting_for_age"
def test_state_handler_waiting_for_age(handler, mock_vk_bot):
    # –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    event = MagicMock()
    user_id = 123
    user_name = "–ò–≤–∞–Ω"
    state = "waiting_for_age"
    request = "25,30"

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    handler.user_data[user_id] = {}

    # –í—ã–∑–æ–≤ –º–µ—Ç–æ–¥–∞
    handler.state_handler(state, event, user_id, user_name, request)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–æ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –≥–æ—Ä–æ–¥ –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –≤–æ–∑—Ä–∞—Å—Ç
    mock_vk_bot.send_message.assert_called_with(user_id, "–£–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥ –≤ –∫–æ—Ç–æ—Ä–æ–º –∏—Å–∫–∞—Ç—å —Å–ø—É—Ç–Ω–∏–∫–∞ –∂–∏–∑–Ω–∏")
    mock_vk_bot.set_user_state.assert_called_with(user_id, "waiting_for_city")
    assert handler.user_data[user_id]['age'] == ['25', '30']

# –¢–µ—Å—Ç–∏—Ä—É–µ–º state_handler —Å —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º "waiting_for_city"
from unittest.mock import patch, MagicMock

# –¢–µ—Å—Ç–∏—Ä—É–µ–º state_handler —Å —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º "waiting_for_city"
# –¢–µ—Å—Ç–∏—Ä—É–µ–º state_handler —Å —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º "waiting_for_city"
@patch('utils.AuxiliaryUtils.get_candidate_db')  # –ü–∞—Ç—á –¥–ª—è get_candidate_db
@patch.object(Handler, 'message_handler')  # –ü–∞—Ç—á –¥–ª—è message_handler
def test_state_handler_waiting_for_city(mock_message_handler, mock_get_candidate_db, handler, mock_vk_bot):
    # –ü–∞—Ç—á–∏–º –º–µ—Ç–æ–¥ set_user_state –Ω–∞ –æ–±—ä–µ–∫—Ç–µ vk_bot
    handler.vk_bot.set_user_state = MagicMock()

    # –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    event = MagicMock()
    user_id = 123
    user_name = "–ò–≤–∞–Ω"
    state = "waiting_for_city"
    request = "–ú–æ—Å–∫–≤–∞"

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    handler.user_data[user_id] = {}

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è user_candidate_data –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    handler.user_candidate_data[user_id] = {}  # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å

    # –í—ã–∑–æ–≤ –º–µ—Ç–æ–¥–∞
    handler.state_handler(state, event, user_id, user_name, request)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –æ –≥–æ—Ä–æ–¥–µ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è
    assert handler.user_data[user_id]['city'] == request  # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –≥–æ—Ä–æ–¥ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ "–ú–æ—Å–∫–≤–∞"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ set_user_state –±—ã–ª –≤—ã–∑–≤–∞–Ω
    handler.vk_bot.set_user_state.assert_called_with(user_id, None)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ message_handler –±—ã–ª –≤—ã–∑–≤–∞–Ω —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏
    mock_message_handler.assert_called_once_with(event, user_name, 'show')